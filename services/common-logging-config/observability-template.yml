# Management endpoints for monitoring and observability
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,circuitbreakerevents,env,configprops,ratelimiters,retries,timelimiters
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
  prometheus:
    metrics:
      export:
        enabled: true
  otlp:
    tracing:
      endpoint: ${JAEGER_OTLP_ENDPOINT:http://localhost:4318/v1/traces}

# Circuit Breaker Configuration for Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      default:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
      emailService:
        register-health-indicator: true
        sliding-window-size: 15
        minimum-number-of-calls: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 10s
      databaseService:
        register-health-indicator: true
        sliding-window-size: 20
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
      userService:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
      paymentService:
        register-health-indicator: true
        sliding-window-size: 15
        minimum-number-of-calls: 8
        failure-rate-threshold: 60
        wait-duration-in-open-state: 15s
  retry:
    instances:
      default:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
      emailService:
        max-attempts: 2
        wait-duration: 2s
      databaseService:
        max-attempts: 3
        wait-duration: 500ms
      userService:
        max-attempts: 3
        wait-duration: 1s
      paymentService:
        max-attempts: 4
        wait-duration: 2s
  ratelimiter:
    instances:
      default:
        limit-for-period: 50
        limit-refresh-period: 1s
        timeout-duration: 500ms
      userService:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 1s
      paymentService:
        limit-for-period: 30
        limit-refresh-period: 1s
        timeout-duration: 2s
  timelimiter:
    instances:
      default:
        timeout-duration: 3s
      emailService:
        timeout-duration: 5s
      databaseService:
        timeout-duration: 2s
      userService:
        timeout-duration: 4s
      paymentService:
        timeout-duration: 10s

# Environment variable configuration
environment:
  service:
    name: ${spring.application.name}
    version: ${SERVICE_VERSION:1.0.0}
    environment: ${ENVIRONMENT:development}

# Distributed tracing configuration
spring:
  application:
    name: ${SERVICE_NAME:unknown-service}
  # Micrometer Tracing with OTLP for Spring Boot 3 (Jaeger endpoint configured above)

# Fintech-specific monitoring configurations
fintech:
  monitoring:
    # Enable custom metrics for financial operations
    transaction-metrics:
      enabled: true
    payment-metrics:
      enabled: true
    security-metrics:
      enabled: true
  
  # Security and compliance monitoring
  security:
    audit-logging:
      enabled: true
    rate-limiting:
      enabled: true
      default-limit: 100
    
  # Performance monitoring thresholds
  performance:
    transaction-timeout: 30s
    payment-timeout: 60s
    database-timeout: 5s
