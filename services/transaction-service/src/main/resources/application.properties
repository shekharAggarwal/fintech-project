spring.application.name=transaction-service

## Database Configuration
#spring.datasource.url=jdbc:postgresql://localhost:5432/transaction_db
#spring.datasource.username=${DB_USERNAME:fintech_user}
#spring.datasource.password=${DB_PASSWORD:fintech123}
#spring.datasource.driver-class-name=org.postgresql.Driver
#
## Connection Pool Configuration
#spring.datasource.hikari.maximum-pool-size=20
#spring.datasource.hikari.minimum-idle=5
#spring.datasource.hikari.idle-timeout=300000
#spring.datasource.hikari.max-lifetime=1800000
#spring.datasource.hikari.connection-timeout=20000
#
## JPA/Hibernate Configuration
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.show-sql=false
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.jdbc.batch_size=25
#spring.jpa.properties.hibernate.order_inserts=true
#spring.jpa.properties.hibernate.order_updates=true
#spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
#
## Flyway Configuration
#spring.flyway.enabled=true
#payment-initiatedspring.flyway.enabled=true
#spring.flyway.locations=classpath:db/migration
#spring.flyway.baseline-on-migrate=true
#
## Kafka Configuration
#spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
#spring.kafka.consumer.group-id=transaction-service-group
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.enable-auto-commit=false
#spring.kafka.consumer.isolation-level=read_committed
#spring.kafka.listener.ack-mode=manual_immediate
#
## Kafka Producer Configuration (fixed properties)
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.acks=all
#spring.kafka.producer.retries=3
#spring.kafka.producer.batch-size=16384
#spring.kafka.producer.buffer-memory=33554432
#spring.kafka.producer.properties.linger.ms=10
#spring.kafka.producer.properties.enable.idempotence=true
#
## RabbitMQ Configuration
#spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
#spring.rabbitmq.port=${RABBITMQ_PORT:5672}
#spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
#spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}
#spring.rabbitmq.virtual-host=${RABBITMQ_VHOST:/}
#
## Circuit Breaker Configuration
#resilience4j.circuitbreaker.instances.ledgerService.register-health-indicator=true
#resilience4j.circuitbreaker.instances.ledgerService.sliding-window-size=10
#resilience4j.circuitbreaker.instances.ledgerService.minimum-number-of-calls=5
#resilience4j.circuitbreaker.instances.ledgerService.failure-rate-threshold=50
#resilience4j.circuitbreaker.instances.ledgerService.wait-duration-in-open-state=30s
#resilience4j.circuitbreaker.instances.ledgerService.permitted-number-of-calls-in-half-open-state=3
#
## Retry Configuration
#resilience4j.retry.instances.ledgerProcessing.max-attempts=3
#resilience4j.retry.instances.ledgerProcessing.wait-duration=2s
#resilience4j.retry.instances.ledgerProcessing.exponential-backoff-multiplier=2
#
## Health Check Configuration
#management.endpoints.web.exposure.include=health,info,prometheus,metrics
#management.endpoint.health.show-details=always
#management.health.circuitbreakers.enabled=true
#management.health.db.enabled=true
#
## Metrics Configuration
#management.prometheus.metrics.export.enabled=true
#
## SSL Configuration
#server.ssl.enabled=${SSL_ENABLED:false}
#server.ssl.key-store=${SSL_KEYSTORE:classpath:fintech.p12}
#server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD:fintech123}
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=fintech
#
## Trust Store Configuration
#server.ssl.trust-store=${SSL_TRUSTSTORE:classpath:fintech-truststore.jks}
#server.ssl.trust-store-password=${SSL_TRUSTSTORE_PASSWORD:fintech123}
#server.ssl.trust-store-type=JKS
#
## External Service URLs
#external.services.ledger.url=${LEDGER_SERVICE_URL:http://ledger-service:8084}
#external.services.payment.url=${PAYMENT_SERVICE_URL:http://payment-service:8083}
#
## mTLS Configuration
#ssl.enabled=${SSL_ENABLED:false}
#ssl.keystore.path=${SSL_KEYSTORE_PATH:classpath:fintech.p12}
#ssl.keystore.password=${SSL_KEYSTORE_PASSWORD:fintech123}
#ssl.truststore.path=${SSL_TRUSTSTORE_PATH:classpath:fintech-truststore.jks}
#ssl.truststore.password=${SSL_TRUSTSTORE_PASSWORD:fintech123}
#
## Async Configuration
#spring.task.execution.pool.core-size=2
#spring.task.execution.pool.max-size=10
#spring.task.execution.pool.queue-capacity=100
#spring.task.execution.thread-name-prefix=transaction-async-
#
## Scheduling Configuration
#spring.task.scheduling.pool.size=3
#
## Timezone Configuration
#spring.jackson.time-zone=${TIMEZONE:America/New_York}
#spring.jpa.properties.hibernate.jdbc.time_zone=${TIMEZONE:America/New_York}
#
## Logging Configuration
#logging.level.com.fintech.transactionservice=INFO
#logging.level.org.springframework.kafka=INFO
#logging.level.org.apache.kafka=WARN
#logging.level.org.hibernate=WARN
#logging.level.org.springframework.security=INFO
#logging.level.io.github.resilience4j=INFO
#
## Request/Response Logging
#logging.level.org.springframework.web.client=DEBUG
#server.tomcat.accesslog.enabled=true
#server.tomcat.accesslog.pattern=%h %l %u %t "%r" %s %b %D
#
## Environment-specific overrides
#spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}
#
## Request size limits
#server.max-http-request-header-size=20KB
#spring.servlet.multipart.max-file-size=10MB
#spring.servlet.multipart.max-request-size=10MB
#
## Session timeout
#server.servlet.session.timeout=30m

# Connection timeout for REST calls (custom properties handled in RestTemplate configuration)
# http.client.connection-timeout=5000
# http.client.read-timeout=10000
