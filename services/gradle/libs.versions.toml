[versions]
resilience4j = "2.2.0"
flyway = "10.21.0"
jwt = "0.12.5"
logstashEncoder = "7.4"
splunkLogging = "1.11.8"
bucket4j = "7.6.0"
micrometerTracing = "1.2.2"
redisson = "3.27.2"
jakartaAnnotation = "2.1.1"
jakartaServlet = "6.0.0"
grpc = "1.62.2"
protobuf = "3.25.3"
javaxAnnotation = "1.3.2"
#httpclient5 = "5.2.1"

[libraries]
# Spring Boot & Cloud
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-amqp = { module = "org.springframework.boot:spring-boot-starter-amqp" }
spring-boot-starter-mail = { module = "org.springframework.boot:spring-boot-starter-mail" }
spring-boot-starter-thymeleaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf" }
spring-boot-starter-quartz = { module = "org.springframework.boot:spring-boot-starter-quartz" }
spring-cloud-config = { module = "org.springframework.cloud:spring-cloud-starter-config" }
spring-cloud-config-server = { module = "org.springframework.cloud:spring-cloud-config-server" }
spring-cloud-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway" }
#spring-cloud-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka" }
spring-security-crypto = { module = "org.springframework.security:spring-security-crypto" }

# Gateway specific
redisson-spring-boot-starter = { module = "org.redisson:redisson-spring-boot-starter", version.ref = "redisson" }
jakarta-annotation-api = { module = "jakarta.annotation:jakarta.annotation-api", version.ref = "jakartaAnnotation" }
jakarta-servlet-api = { module = "jakarta.servlet:jakarta.servlet-api", version.ref = "jakartaServlet" }
resilience4j-ratelimiter = { module = "io.github.resilience4j:resilience4j-ratelimiter", version.ref = "resilience4j" }

# Resilience4j
resilience4j-springBoot3 = { module = "io.github.resilience4j:resilience4j-spring-boot3", version.ref = "resilience4j" }
resilience4j-circuitbreaker = { module = "io.github.resilience4j:resilience4j-circuitbreaker", version.ref = "resilience4j" }
resilience4j-reactor = { module = "io.github.resilience4j:resilience4j-reactor", version.ref = "resilience4j" }
resilience4j-retry = { module = "io.github.resilience4j:resilience4j-retry", version.ref = "resilience4j" }
resilience4j-timelimiter = { module = "io.github.resilience4j:resilience4j-timelimiter", version.ref = "resilience4j" }
resilience4j-micrometer = { module = "io.github.resilience4j:resilience4j-micrometer", version.ref = "resilience4j" }
#resilience4j-spring6 = { module = "io.github.resilience4j:resilience4j-spring6", version.ref = "resilience4j" }

# Database
postgresql = { module = "org.postgresql:postgresql" }
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }

# JWT
jwt-api = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jwt" }
jwt-impl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jwt" }
jwt-jackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jwt" }

# Tracing (OpenTelemetry)
micrometer-tracing-bridge-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk" }
micrometer-observation = { module = "io.micrometer:micrometer-observation" }
micrometer-tracing = { module = "io.micrometer:micrometer-tracing" }
micrometer-core = { module = "io.micrometer:micrometer-core" }

# Metrics (Prometheus)
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }

# Rate Limiting
bucket4j-core = { module = "com.github.vladimir-bukhtoyarov:bucket4j-core", version.ref = "bucket4j" }
bucket4j-redis = { module = "com.github.vladimir-bukhtoyarov:bucket4j-redis", version.ref = "bucket4j" }

# HTTP Client
#httpclient5 = { module = "org.apache.httpcomponents.client5:httpclient5", version.ref = "httpclient5" }

# Logging
logback-classic = { module = "ch.qos.logback:logback-classic" }
logstash-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashEncoder" }
splunk-logging = { module = "com.splunk.logging:splunk-library-javalogging", version.ref = "splunkLogging" }

# Test dependencies
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }
spring-kafka-test = { module = "org.springframework.kafka:spring-kafka-test" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }
reactor-test = { module = "io.projectreactor:reactor-test" }
h2-database = { module = "com.h2database:h2" }

# gRPC dependencies
grpc-netty-shaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
javax-annotation-api = { module = "javax.annotation:javax.annotation-api", version.ref = "javaxAnnotation" }

[bundles]
# Group related dependencies together for easy application
spring-boot-web = ["spring-boot-starter", "spring-boot-starter-web", "spring-boot-starter-actuator"]
spring-boot-data = ["spring-boot-starter-data-jpa", "postgresql"]
spring-boot-security = ["spring-boot-starter-security", "spring-security-crypto"]
spring-cloud = ["spring-cloud-config"]
resilience4j = ["resilience4j-springBoot3",  "resilience4j-retry", "resilience4j-timelimiter", "resilience4j-micrometer", "resilience4j-reactor", "spring-boot-starter-aop"]
tracing = ["micrometer-tracing-bridge-otel", "opentelemetry-exporter-otlp", "micrometer-registry-prometheus"]
jwt = ["jwt-api", "jwt-impl", "jwt-jackson"]
flyway = ["flyway-core", "flyway-postgresql"]
logging = ["logback-classic", "logstash-encoder", "splunk-logging"]
bucket4j = ["bucket4j-core", "bucket4j-redis"]
test = ["spring-boot-starter-test", "junit-platform-launcher"]
grpc = ["grpc-netty-shaded", "grpc-protobuf", "grpc-stub", "javax-annotation-api"]