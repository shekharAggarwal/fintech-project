server:
  port: ${AUTHORIZATION_SERVICE_PORT}
  ssl:
    client-auth: need
jwt:
  public-cert-path: ${JWT_PUBLIC_CERT_PATH}

spring:
  application:
    name: authorization-service


  datasource:
    url: ${AUTH_DB_URL}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      idle-timeout: 300000
      connection-timeout: 10000
      leak-detection-threshold: 60000
      validation-timeout: 5000
      max-lifetime: 1800000
      keepalive-time: 600000
  data:
    redis:
      database: 0 # Redis DB for authorization caching
  # Kafka Configuration for internal service communications
  kafka:
    consumer:
      group-id: authorization-service-group
      client-id: authorization-service-consumer
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
#        spring.json.trusted.packages: com.fintech.authorizationservice.dto
#        enable.auto.commit: false
#        auto.offset.reset: earliest
#        max.poll.records: 10