server:
  port: ${AUTH_SERVICE_PORT}
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false

spring:
  application:
    name: auth-service
  
  # Database Configuration - using direct connection for simplicity
  datasource:
    url: ${AUTH_DB_URL:jdbc:postgresql://fintech_postgres_auth:5432/fintech_auth}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        batch_size: 20
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 20
          batch_versioned_data: true
    open-in-view: false
  
  # Redis Configuration
  data:
    redis:
      database: 0
      host: ${REDIS_HOST:fintech_redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 1
          max-wait: -1ms
  
  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:fintech_rabbitmq}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_DEFAULT_USER}
    password: ${RABBITMQ_DEFAULT_PASS}
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      retry:
        enabled: true
        initial-interval: 1000ms
        max-attempts: 3
        max-interval: 10000ms
        multiplier: 2.0

# JWT Configuration
jwt:
  keystore-path: ${JWT_KEYSTORE_PATH}
  keystore-password: ${JWT_KEYSTORE_PASSWORD}
  key-alias: ${JWT_KEY_ALIAS}
  access-token-expiration: 900000  # 15 minutes
  refresh-token-expiration: 86400000  # 24 hours

# Security Configuration
security:
  password:
    min-length: 8
    require-uppercase: true
    require-lowercase: true
    require-digit: true
    require-special-char: true
  session:
    timeout-minutes: 15
    max-concurrent-sessions: 1
    prevent-session-fixation: true

# Rate Limiting Configuration
rate-limit:
  login:
    max-attempts: 5
    window-minutes: 1
  registration:
    max-attempts: 3
    window-hours: 1
  password-reset:
    max-attempts: 2
    window-hours: 1

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      auth-service:
        sliding-window-size: 100
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        slow-call-duration-threshold: 5s
        slow-call-rate-threshold: 50
        permitted-number-of-calls-in-half-open-state: 5
      database:
        sliding-window-size: 50
        minimum-number-of-calls: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 10s
  retry:
    instances:
      auth-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.util.concurrent.TimeoutException
          - org.springframework.dao.DataAccessException
  timelimiter:
    instances:
      auth-service:
        timeout-duration: 5s

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
    redis:
      enabled: true
    db:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
      environment: ${SPRING_PROFILES_ACTIVE:default}
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
        "[resilience4j.circuitbreaker.calls]": true
  tracing:
    sampling:
      probability: 1.0

# Logging Configuration
logging:
  level:
    '[com.fintech]': INFO
    '[org.springframework.security]': WARN
    '[org.hibernate.SQL]': WARN
    '[org.hibernate.type.descriptor.sql.BasicBinder]': WARN
    '[AUDIT]': INFO
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
    console: "%d{ISO8601} ${LOG_LEVEL_PATTERN:-%5p} [%t] [%X{traceId:-},%X{spanId:-}] %-40.40logger{39} : %m%n"
  appender:
    audit:
      name: AUDIT_FILE
      file: logs/audit.log
      pattern: "%d{ISO8601} [%X{traceId:-},%X{spanId:-}] [%X{eventType:-}] [%X{userId:-}] [%X{ipAddress:-}] %m%n"
