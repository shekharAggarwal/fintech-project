server:
  port: ${USER_SERVICE_PORT}

spring:
  application:
    name: user-service
  datasource:
    main:
      url: ${MAIN_DB_URL}
    shard1:
      url: ${SHARD1_DB_URL}
    shard2:
      url: ${SHARD2_DB_URL}
    shard3:
      url: ${SHARD3_DB_URL}
  data:
    redis:
      database: 2 # Redis DB for user caching

# Internal service communication settings
services:
  authorization-service:
    url: ${AUTHORIZATION_SERVICE_URL:https://authorization-service:8443}

# SSL/mTLS configuration for inter-service communication
ssl:
  client:
    keystore:
      path: ${SSL_CLIENT_KEYSTORE_PATH:/certs/fintech.p12}
      password: ${SSL_CLIENT_KEYSTORE_PASSWORD}
      type: ${SSL_CLIENT_KEYSTORE_TYPE:PKCS12}
    truststore:
      path: ${SSL_CLIENT_TRUSTSTORE_PATH:/certs/fintech-truststore.jks}
      password: ${SSL_CLIENT_TRUSTSTORE_PASSWORD}
      type: ${SSL_CLIENT_TRUSTSTORE_TYPE:JKS}

resilience4j:
  circuitbreaker:
    instances:
      user-cache:
        sliding-window-size: 50
        minimum-number-of-calls: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 10s
      authorization-service:
        sliding-window-size: 10
        minimum-number-of-calls: 3
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
  retry:
    instances:
      user-retry:
        max-attempts: 3
        wait-duration: 500ms
      authorization-service:
        max-attempts: 2
        wait-duration: 200ms
  timelimiter:
    instances:
      user-service:
        timeout-duration: 5s
      authorization-service:
        timeout-duration: 3s
