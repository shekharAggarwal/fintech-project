version: "3.8"

services:
  #-----------------------------------
  # MONITORING & LOGGING STACK
  #-----------------------------------
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: fintech_prometheus
    networks:
      - fintech_net
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.4.2
    container_name: fintech_grafana
    networks:
      - fintech_net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/fintech-monitoring-dashboard.json:/etc/grafana/provisioning/dashboards/fintech-monitoring-dashboard.json
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: fintech_jaeger
    networks:
      - fintech_net
    ports:
      - "16686:16686" # Jaeger UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      
  splunk:
    image: splunk/splunk:9.1.2
    container_name: fintech_splunk
    networks:
      - fintech_net
    ports:
      - "8000:8000"
      - "8088:8088"
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_PASSWORD: ${SPLUNK_PASSWORD}
      SPLUNK_HEC_TOKEN: ${SPLUNK_HEC_TOKEN}
    volumes:
      - splunk-data:/opt/splunk/var

  #-----------------------------------
  # INFRASTRUCTURE & PLATFORM SERVICES
  #-----------------------------------
  config-server:
    build:
      context: ../services/config-server
    container_name: fintech_config_server
    networks:
      - fintech_net
    ports:
      - "8888:8888"
    volumes:
      - ../services/config-repo/default:/config
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: /config
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 30

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fintech_zookeeper
    networks:
      - fintech_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fintech_kafka
    networks:
      - fintech_net
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  rabbitmq:
    image: rabbitmq:3-management
    container_name: fintech_rabbitmq
    networks:
      - fintech_net
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

  fintech_redis:
    image: redis:7
    container_name: fintech_redis
    networks:
      - fintech_net
    ports:
      - "6379:6379"

  #-----------------------------------
  # DATABASE INSTANCES (SHARDING)
  #-----------------------------------
  postgres-main:
    image: postgres:15
    container_name: fintech_postgres_main
    networks:
      - fintech_net
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fintech_main
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-main-data:/var/lib/postgresql/data

  postgres-shard-1:
    image: postgres:15
    container_name: fintech_postgres_shard_1
    networks:
      - fintech_net
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: fintech_shard1
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-shard-1-data:/var/lib/postgresql/data

  postgres-shard-2:
    image: postgres:15
    container_name: fintech_postgres_shard_2
    networks:
      - fintech_net
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: fintech_shard2
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-shard-2-data:/var/lib/postgresql/data

  postgres-shard-3:
    image: postgres:15
    container_name: fintech_postgres_shard_3
    networks:
      - fintech_net
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: fintech_shard3
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-shard-3-data:/var/lib/postgresql/data

  postgres-auth:
    image: postgres:15
    container_name: fintech_postgres_auth
    networks:
      - fintech_net
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: fintech_auth
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data

  postgres-scheduler:
    image: postgres:15
    container_name: fintech_postgres_scheduler
    networks:
      - fintech_net
    ports:
      - "5437:5432"
    environment:
      POSTGRES_DB: fintech_scheduler
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-scheduler-data:/var/lib/postgresql/data

  postgres-retry:
    image: postgres:15
    container_name: fintech_postgres_retry
    networks:
      - fintech_net
    ports:
      - "5438:5432"
    environment:
      POSTGRES_DB: fintech_retry
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres-retry-data:/var/lib/postgresql/data

  #-----------------------------------
  # APPLICATION MICROSERVICES
  #-----------------------------------
  gateway-service:
    build: ../services/gateway-service
    container_name: fintech_gateway_service
    networks:
      - fintech_net
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
    volumes:
      - ../certs:/app/certs:ro
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy

  auth-service:
    build: ../services/auth-service
    container_name: fintech_auth_service
    networks:
      - fintech_net
    env_file: .env
    volumes:
      - ../certs:/app/certs:ro
    depends_on:
      config-server:
        condition: service_healthy
      postgres-main:
        condition: service_started
      postgres-shard-1:
        condition: service_started

  authorization-service:
    build: ../services/authorization-service
    container_name: fintech_authorization_service
    networks:
      - fintech_net
    env_file: .env
    volumes:
      - ../certs:/app/certs:ro
    depends_on:
      config-server:
        condition: service_healthy
      postgres-auth:
        condition: service_started

  user-service:
    build: ../services/user-service
    container_name: fintech_user_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy

  payment-service:
    build: ../services/payment-service
    container_name: fintech_payment_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy

  transaction-service:
    build: ../services/transaction-service
    container_name: fintech_transaction_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy

  notification-service:
    build: ../services/notification-service
    container_name: fintech_notification_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy

  reporting-service:
    build: ../services/reporting-service
    container_name: fintech_reporting_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy

  scheduler-service:
    build: ../services/scheduler-service
    container_name: fintech_scheduler_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      postgres-scheduler:
        condition: service_started

  retry-service:
    build: ../services/retry-service
    container_name: fintech_retry_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      postgres-retry:
        condition: service_started

networks:
  fintech_net:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  splunk-data:
  postgres-main-data:
  postgres-shard-1-data:
  postgres-shard-2-data:
  postgres-shard-3-data:
  postgres-auth-data:
  postgres-scheduler-data:
  postgres-retry-data:
