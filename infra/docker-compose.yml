version: "3.8"

services:
  #-----------------------------------
  # MONITORING & LOGGING STACK
  #-----------------------------------
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: fintech_prometheus
    networks:
      - fintech_net
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grafana:
    image: grafana/grafana:10.4.2
    container_name: fintech_grafana
    networks:
      - fintech_net
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/fintech-monitoring-dashboard.json:/etc/grafana/provisioning/dashboards/fintech-monitoring-dashboard.json
      - grafana-data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: fintech_jaeger
    networks:
      - fintech_net
    ports:
      - "16686:16686"
      - "4318:4318"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  splunk:
    image: splunk/splunk:9.1.2
    container_name: fintech_splunk
    networks:
      - fintech_net
    ports:
      - "8000:8000"
      - "8088:8088"
    environment:
      SPLUNK_START_ARGS: --accept-license
      SPLUNK_PASSWORD: ${SPLUNK_PASSWORD}
      SPLUNK_HEC_TOKEN: ${SPLUNK_HEC_TOKEN}
    volumes:
      - splunk-data:/opt/splunk/var
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/en-US/account/login"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  #-----------------------------------
  # MESSAGE QUEUE & CACHE
  #-----------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fintech_zookeeper
    networks:
      - fintech_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fintech_kafka
    networks:
      - fintech_net
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: fintech_rabbitmq
    networks:
      - fintech_net
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  fintech_redis:
    image: redis:7-alpine
    container_name: fintech_redis
    volumes:
      - redis-data:/data
    networks:
      - fintech_net
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres-main:
    image: postgres:15
    container_name: fintech_postgres_main
    networks:
      - fintech_net
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: fintech_main
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres-main-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d fintech_main"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-auth:
    image: postgres:15
    container_name: fintech_postgres_auth
    networks:
      - fintech_net
    ports:
      - "5436:5432"
    environment:
      POSTGRES_DB: fintech_auth
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d fintech_auth"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-scheduler:
    image: postgres:15
    container_name: fintech_postgres_scheduler
    networks:
      - fintech_net
    ports:
      - "5437:5432"
    environment:
      POSTGRES_DB: fintech_scheduler
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres-scheduler-data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d fintech_scheduler"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-retry:
    image: postgres:15
    container_name: fintech_postgres_retry
    networks:
      - fintech_net
    ports:
      - "5438:5432"
    environment:
      POSTGRES_DB: fintech_retry
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER}
    volumes:
      - postgres-retry-data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d fintech_retry"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  #-----------------------------------
  # INFRASTRUCTURE & PLATFORM SERVICES
  #-----------------------------------
  config-server:
    build:
      context: ../services/config-server
    container_name: fintech_config_server
    networks:
      - fintech_net
    ports:
      - "8888:8888"
    volumes:
      - ../services/config-repo/default:/config
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: /config
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s

  #-----------------------------------
  # APPLICATION MICROSERVICES
  #-----------------------------------
  gateway-service:
    build: ../services/gateway-service
    container_name: fintech_gateway_service
    networks:
      - fintech_net
    ports:
      - "${GATEWAY_SERVICE_PORT}:${GATEWAY_SERVICE_PORT}"
    volumes:
      - ../certs:/app/certs:ro
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      fintech_redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${GATEWAY_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  auth-service:
    build: ../services/auth-service
    container_name: fintech_auth_service
    networks:
      - fintech_net
    env_file: .env
    volumes:
      - ../certs:/app/certs:ro
    depends_on:
      config-server:
        condition: service_healthy
      fintech_redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${AUTH_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  authorization-service:
    build: ../services/authorization-service
    container_name: fintech_authorization_service
    networks:
      - fintech_net
    env_file: .env
    volumes:
      - ../certs:/app/certs:ro
    depends_on:
      config-server:
        condition: service_healthy
      postgres-auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${AUTHORIZATION_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  user-service:
    build: ../services/user-service
    container_name: fintech_user_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${USER_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  payment-service:
    build: ../services/payment-service
    container_name: fintech_payment_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${PAYMENT_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  transaction-service:
    build: ../services/transaction-service
    container_name: fintech_transaction_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${TRANSACTION_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  notification-service:
    build: ../services/notification-service
    container_name: fintech_notification_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${NOTIFICATION_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  reporting-service:
    build: ../services/reporting-service
    container_name: fintech_reporting_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${REPORTING_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  scheduler-service:
    build: ../services/scheduler-service
    container_name: fintech_scheduler_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      postgres-scheduler:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${SCHEDULER_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  retry-service:
    build: ../services/retry-service
    container_name: fintech_retry_service
    networks:
      - fintech_net
    env_file: .env
    depends_on:
      config-server:
        condition: service_healthy
      postgres-retry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${RETRY_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  fintech_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  splunk-data:
    driver: local
  postgres-main-data:
    driver: local
  postgres-shard-1-data:
    driver: local
  postgres-shard-2-data:
    driver: local
  postgres-shard-3-data:
    driver: local
  postgres-main-replica-data:
    driver: local
  postgres-shard-1-replica-data:
    driver: local
  postgres-shard-2-replica-data:
    driver: local
  postgres-shard-3-replica-data:
    driver: local
  postgres-auth-data:
    driver: local
  postgres-scheduler-data:
    driver: local
  postgres-retry-data:
    driver: local
  redis-data:
    driver: local
